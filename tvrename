#!/usr/bin/env python
# encoding: utf-8
"""
tvrename

Created by Miguel Vaz on 2009-11-24.
Copyright (c) 2009. All rights reserved.
"""

import sys
import getopt
import os
import re
import errno
import shutil
import logging
import threading

from pytvrename import *

help_message = '''
Usage:
   tvrename --outputdir=/media/tv --inputdir=.
or
   tvrename --outputdir=/media/tv  this.show.s03e01.whatever.xvid.avi

at the moment, if inputdir and file-arguments are specified, only the specified files are processed

Options:

	-v, --verbose
	-d, --debug
	-S, --silent
	-s, --simulate
	-h, --help
	-m, --move

	-o=, --outputdir=
	-i=, --inputdir=
	-p=, --pattern=
'''


# default configuration
config = { 'outputdir': os.path.abspath('.'),
           'inputdir':  os.path.abspath('.'),
           'move':      False,
           'simulate':  False,
           'pattern':   os.path.join("%(show)s","Season %(season)d","%(filename)s") }


# create the logging objects
log = logging.getLogger('pytvrename')
ch  = logging.StreamHandler()

# create formatter and add it to the handlers
ch.setFormatter( logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s") )

# add the handler to the logger
log.addHandler(ch)


def isMovieFile(filename):
	"""
	determines whether a given file is a movie file 
	currently give by a simple regular expression
	TODO add isfile test
	"""
	if not os.path.isfile(filename):
		return False
	reg = re.compile( ".*?.avi$", re.I | re.U )
	return reg.match(filename)

def mkdirp(path):
	"""
	replicates functionality of mkdir -p
	"""
	try:
		os.makedirs(path)
	except OSError, exc:
		if exc.errno == errno.EEXIST:
			pass
		else: raise


# class RenamerThread(threading.Thread):
# 	"""docstring for RenamerThread"""
# 	def __init__(self, renamer, filename):
# 		super(RenamerThread, self).__init__()
# 		self.renamer = renamer
# 		self.filename = filename
# 		self.result = None
# 	
# 	def get_result(self):
# 		return self.result
# 	
def run(renamer, filename):
	# generate the path of the filename 
	result = None
	origin_path = os.path.abspath( os.path.join( config['inputdir'], filename ) )
	
	# skip non movie files
	if not isMovieFile( origin_path ):
		log.warn("ignoring '%s': not a (movie) file" % origin_path)
		return result
	
	# create the episode from the filename. if not possible, skips the file
	try:
		# create the episode object
		ep = Episode.createEpisodeFromFilename( filename )
		
		log.debug("processing '%s'" % filename)
		
		# standardize the show name
		ep.show = renamer.normalizeShowTitle( ep.show )
		
		# get the title of the episode
		ep.title = renamer.getEpisodeName( ep )
		ep.title = ep.title.decode('utf8')
		# log.debug(u'Episode\'s name is: %s' % )
		
		correctFilename = ep.generateCorrectFilename()
		
	except CouldNotParseEpisodeError:
		raise
	# except IndexError:
	# 	log.warn(u'Real show name could not be found. Proceeding with the name scraped from the file: %s' % ep.show)
	except EpisodeNotFoundError:
		log.warn("EpisodeNotFoundError: setting title to ''")
		ep.title = ""
		
	except UnicodeDecodeError:
		ep.title = ep.title.decode('utf8')
		correctFilename = ep.generateCorrectFilename()
	
	# 
	goal_path = config['pattern']  % { 'show': ep.show,
                                       'season': int(ep.season),
                                       'filename': correctFilename }
	goal_path = goal_path.encode('utf-8')
	goal_path = os.path.abspath( os.path.join( config['outputdir'], goal_path ) )
	
	return goal_path
	
		

class Usage(Exception):
	def __init__(self, msg):
		self.msg = msg


def main(argv=None):
	if argv is None:
		argv = sys.argv
	try:
		try:
			opts, args = getopt.getopt( argv[1:], "smho:p:i:vd", ["simulate", "move", "help", "outputdir=", "pattern=", 'inputdir=', 'debug'] )
		except getopt.error, msg:
			raise Usage(msg)
		
		# option processing
		for option, value in opts:
			if option in ("-v", "--verbose"):
				log.setLevel( logging.INFO )
				ch.setLevel( logging.INFO )
			if option in ("-d", "--debug"):
				log.setLevel( logging.DEBUG )
				ch.setLevel( logging.DEBUG )
			if option in ("-S", "--silent")
				log.setLevel( logging.CRITICAL )
				ch.setLevel( logging.CRITICAL )
			if option in ("-s", "--simulate"):
				config['simulate'] = True
			if option in ("-h", "--help"):
				raise Usage(help_message)
			if option in ("-o", "--outputdir"):
				config['outputdir'] = value
			if option in ("-i", "--inputdir"):
				config['inputdir'] = value
			if option in ("-p", "--pattern"):
				config['pattern'] = value
			if option in ("-m", "--move"):
				config['move'] = True
			
		
	except Usage, err:
		print >> sys.stderr, sys.argv[0].split("/")[-1] + ": " + str(err.msg)
		print >> sys.stderr, "\t for help use --help"
		return 2
	
	# list the directory
	if len(args) > 0:
		fileList = args
	else:
		fileList = os.listdir( config['inputdir'] )
	
	log.debug( "files to be processed: " + str(fileList) )
	# build the necessary objects
	renamer = EpisodeRenamer()
	
	# go through every filenames in the list
	for filename in fileList:
		
		try:
			(origin_path, goal_path) = run( renamer, filename)
		except CouldNotParseEpisodeError:
			log.warn("ignoring '%s'" % filename)
			continue
		
				# 
				# # generate the path of the filename 
				# origin_path = os.path.abspath( os.path.join( config['inputdir'], filename ) )
				# 
				# if not isMovieFile( origin_path ):
				# 	log.warn("ignoring '%s': not a (movie) file" % origin_path)
				# 	continue
				# 
				# # create the episode from the filename. if not possible, skips the file
				# try:
				# 	ep = Episode.createEpisodeFromFilename( filename )
				# except:
				# 	log.warn("ignoring '%s'" % filename)
				# 	continue
				# log.debug("processing '%s'" % filename)
				# 
				# # standardize the show name
				# try:
				# 	ep.show = renamer.normalizeShowTitle( ep.show )
				# except IndexError:
				# 	log.warn(u'Real show name could not be found. Proceeding with the name scraped from the file: %s' % ep.show)
				# # get the title of the episode
				# try:
				# 	ep.title = renamer.getEpisodeName( ep )
				# 	ep.title = ep.title.decode('utf8')
				# 	# log.debug(u'Episode\'s name is: %s' % )
				# except EpisodeNotFoundError:
				# 	log.warn("EpisodeNotFoundError: setting title to ''")
				# 	ep.title = ""
				# 
				# # try and get the correctFilename, and pay attention to unicode difficulties
				# try:
				# 	correctFilename = ep.generateCorrectFilename()
				# except UnicodeDecodeError:
				# 	ep.title = ep.title.decode('utf8')
				# 	correctFilename = ep.generateCorrectFilename()
		# make the output of the stuff
		# goal_path = config['pattern']  % { 'show': ep.show,
		# 	                                       'season': int(ep.season),
		# 	                                       'filename': correctFilename }
		# goal_path = goal_path.encode('utf-8')
		# goal_path = os.path.abspath( os.path.join( config['outputdir'], goal_path ) )
		
		# make the goal path
		if not config['simulate']:
			mkdirp( os.path.dirname(goal_path) )
		
		# copy or move the file from origin to goal
		if config['move']:
			log.info( "mv '%s' '%s'" % ( origin_path, goal_path) )
			if not config['simulate']:
				shutil.move( origin_path, goal_path )
		else:
			log.info( "cp '%s' '%s'" % ( origin_path, goal_path) )
			if not config['simulate']:
				shutil.copyfile( origin_path, goal_path )

if __name__ == "__main__":
	sys.exit(main())
