#!/usr/bin/env python
# encoding: utf-8
"""
untitled.py

Created by Miguel Vaz on 2009-11-24.
Copyright (c) 2009 Universidade do Minho. All rights reserved.
"""

import sys
import getopt
import os
import re
import errno
import shutil

from pytvrename import *

help_message = '''
Usage:
   tvrename --outputdir=/media/tv --inputdir=.
or
   tvrename --outputdir=/media/tv  this.show.s03e01.whatever.xvid.avi

at the moment, if inputdir and file-arguments are specified, only the specified files are processed

Options:
   --pattern=
   --move
'''


# default configuration
config = { 'outputdir': os.path.abspath('.'),
           'inputdir': os.path.abspath('.'),
           'move': False,
           'pattern': os.path.join("%(show)s","Season %(season)d","%(filename)s") }



def isMovieFile(filename):
	"""
	determines whether a given file is a movie file 
	currently give by a simple regular expression
	TODO add isfile test
	"""
	reg = re.compile( ".*?.avi$", re.I | re.U )
	return reg.match(filename)

def mkdirp(path):
	"""
	replicates functionality of mkdir -p
	"""
	try:
		os.makedirs(path)
	except OSError, exc:
		if exc.errno == errno.EEXIST:
			pass
		else: raise


class Usage(Exception):
	def __init__(self, msg):
		self.msg = msg


def main(argv=None):
	if argv is None:
		argv = sys.argv
	try:
		try:
			opts, args = getopt.getopt( argv[1:], "mho:p:i:v", ["help", "outputdir=", "pattern=", 'inputdir='] )
		except getopt.error, msg:
			raise Usage(msg)
	
		# option processing
		for option, value in opts:
			if option == "-v":
				verbose = True
			if option in ("-h", "--help"):
				raise Usage(help_message)
			if option in ("-o", "--outputdir"):
				config['outputdir'] = value
				print "outputdir"
			if option in ("-i", "--inputdir"):
				config['inputdir'] = value
			if option in ("-p", "--pattern"):
				config['pattern'] = value
			if option in ("-m", "--move"):
				config['move'] = True
			
		print config['outputdir']
		
	except Usage, err:
		print >> sys.stderr, sys.argv[0].split("/")[-1] + ": " + str(err.msg)
		print >> sys.stderr, "\t for help use --help"
		return 2
	
	# list the directory
	if len(args) > 0:
		fileList = args
	else:
		fileList = os.listdir( config['inputdir'] )

	# build the necessary objects
	renamer = EpisodeRenamer()

	# go through every filenames in the list
	for filename in fileList:


        # 1 check whether the file exists
        # 2 check whether
		if not isMovieFile( filename ):
			continue

		# create the episode from the filename
		ep = Episode.createEpisodeFromFilename( filename )
		# set the show straight
		ep.show = renamer.normalizeShowTitle( ep.show )
		print ep.show
		# get the title of the episode
		try:
			ep.title = renamer.getEpisodeName( ep )
		except EpisodeNotFoundError:
			print "EpisodeNotFoundError"
			ep.title = ""

		# make the output of the stuff
		goal_path = config['pattern']  % { 'show': ep.show,
		                                   'season': int(ep.season),
		                                   'filename': ep.generateCorrectFilename() }
		goal_path = os.path.abspath( os.path.join( config['outputdir'], goal_path ) )
		# generate the path of the filename 
		origin_path = os.path.abspath( os.path.join( config['inputdir'], filename ) )
		
		# make the goal path
		mkdirp( os.path.dirname(goal_path) )
		
		# copy or move the file from origin to goal
		if config['move']:
			print "move '%s' '%s'" % ( origin_path, goal_path)
			# shutil.move( origin_path, goal_path )
		else:
			print "copy '%s' '%s'" % ( origin_path, goal_path)
			# shutil.copyfile( origin_path, goal_path )

if __name__ == "__main__":
	sys.exit(main())
